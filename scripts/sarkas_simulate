#!/usr/bin/env python

"""
                                SARKAS: 1.0

An open-source pure-python molecular dynamics code for non-ideal plasmas.

Developed by the research group of:
Professor Michael S. Murillo
murillom@msu.edu
Dept. of Computational Mathematics, Science, and Engineering,
Michigan State University
"""

# Python modules
from optparse import OptionParser
# Sarkas modules
from sarkas.processes import Simulation
from sarkas.tools.observables import Thermodynamics

# Construct the argument parser
op = OptionParser()

# Add the arguments to the parser
op.add_option("-t", "--pre_run_testing", action='store_true', dest='test', default=False, help="Test input parameters")
op.add_option("-v", "--verbose", action='store_true', dest='verbose', default=False, help="Verbose output")
op.add_option("-p", "--plot_show", action='store_true', dest='plot_show', default=False, help="Show plots")
op.add_option("-c", "--check_status", type='choice', choices=['equilibration', 'production'],
              action='store', dest='check_status', help="Check current state of run")
op.add_option("-d", "--job_dir", action='store', dest='job_dir', help="Job Directory")
op.add_option("-j", "--job_id", action='store', dest='job_id', help="Job ID")
op.add_option("-s", "--seed", action='store', dest='rand_seed', type=int, help="Random Number Seed")
op.add_option("-i", "--input", action='store', dest='input_file', help="YAML Input file")
op.add_option("-r", "--restart", type=str, action='store', dest='restart', help="Restart simulation")
op.add_option("-e", "--estimate", action='store_true', dest='estimate', help="Estimate optimal parameters")

options, _ = op.parse_args()

# Input file is a must
assert options.input_file, 'Input file not defined.'

# Read initial conditions and setup parameters
if options.test:
    #
    from sarkas.processes import PreProcess
    sim = PreProcess()
else:
    sim = Simulation()

sim.common_parser(options.input_file)

if options.check_status:
    sim.io.check_status = True

    if options.job_id:
        sim.io.job_id = options.job_id

    if options.jod_dir:
        sim.io.job_dir = options.job_dir

    sim.io.setup()
    sim.io.read_pickle(sim)
    energy = Thermodynamics(sim.parameters)
    energy.temp_energy_plot(sim.parameters, options.check, options.plot_show)
else:
    # Update rand seed with option. This supersedes the input file.
    if options.rand_seed:
        sim.parameters.rand_seed = int(options.rand_seed)

    # Verbose output. This does not supersede the input file if False.
    # That is if you don't give this option and the input file has Control.verbose=Yes, then you will
    # still have a verbose output
    if options.verbose:
        sim.parameters.verbose = True
        
    if options.restart:
        ls_str = options.restart.split('_')
        sim.parameters.load_method = ls_str[0] + '_restart'
        sim.parameters.restart_step = int[ls_str[1]]

    sim.setup()
    sim.run()
